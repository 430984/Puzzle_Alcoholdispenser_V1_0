
Zeepdispenser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003cd  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034c  00000000  00000000  000006bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025d  00000000  00000000  00000a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00000c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000026e  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000168  00000000  00000000  00000f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	11 c0       	rjmp	.+34     	; 0x24 <__ctors_end>
   2:	de c0       	rjmp	.+444    	; 0x1c0 <__vector_1>
   4:	1d c0       	rjmp	.+58     	; 0x40 <__bad_interrupt>
   6:	1c c0       	rjmp	.+56     	; 0x40 <__bad_interrupt>
   8:	1b c0       	rjmp	.+54     	; 0x40 <__bad_interrupt>
   a:	1a c0       	rjmp	.+52     	; 0x40 <__bad_interrupt>
   c:	b4 c0       	rjmp	.+360    	; 0x176 <__vector_6>
   e:	18 c0       	rjmp	.+48     	; 0x40 <__bad_interrupt>
  10:	17 c0       	rjmp	.+46     	; 0x40 <__bad_interrupt>
  12:	16 c0       	rjmp	.+44     	; 0x40 <__bad_interrupt>
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__stack+0x29>
  16:	65 c0       	rjmp	.+202    	; 0xe2 <__stack+0x43>
  18:	71 c0       	rjmp	.+226    	; 0xfc <__stack+0x5d>
  1a:	7e c0       	rjmp	.+252    	; 0x118 <__stack+0x79>
  1c:	8b c0       	rjmp	.+278    	; 0x134 <__stack+0x95>
  1e:	98 c0       	rjmp	.+304    	; 0x150 <__stack+0xb1>
  20:	a5 c0       	rjmp	.+330    	; 0x16c <__stack+0xcd>
  22:	a7 c0       	rjmp	.+334    	; 0x172 <__stack+0xd3>

00000024 <__ctors_end>:
  24:	11 24       	eor	r1, r1
  26:	1f be       	out	0x3f, r1	; 63
  28:	cf e9       	ldi	r28, 0x9F	; 159
  2a:	cd bf       	out	0x3d, r28	; 61

0000002c <__do_clear_bss>:
  2c:	20 e0       	ldi	r18, 0x00	; 0
  2e:	a0 e6       	ldi	r26, 0x60	; 96
  30:	b0 e0       	ldi	r27, 0x00	; 0
  32:	01 c0       	rjmp	.+2      	; 0x36 <.do_clear_bss_start>

00000034 <.do_clear_bss_loop>:
  34:	1d 92       	st	X+, r1

00000036 <.do_clear_bss_start>:
  36:	a4 36       	cpi	r26, 0x64	; 100
  38:	b2 07       	cpc	r27, r18
  3a:	e1 f7       	brne	.-8      	; 0x34 <.do_clear_bss_loop>
  3c:	13 d0       	rcall	.+38     	; 0x64 <main>
  3e:	ca c0       	rjmp	.+404    	; 0x1d4 <_exit>

00000040 <__bad_interrupt>:
  40:	df cf       	rjmp	.-66     	; 0x0 <__vectors>

00000042 <doSleep>:
volatile unsigned long ulMil = 0;

void doSleep()
{
	// Interrupt aanzetten (knopje onder de beugel die de MCU wekt)
	GIMSK |= (1 << INT0);
  42:	8b b7       	in	r24, 0x3b	; 59
  44:	80 64       	ori	r24, 0x40	; 64
  46:	8b bf       	out	0x3b, r24	; 59
	// Sleep mode instellen op 'Power down'
	MCUCR |= (1 << SM1);
  48:	85 b7       	in	r24, 0x35	; 53
  4a:	80 61       	ori	r24, 0x10	; 16
  4c:	85 bf       	out	0x35, r24	; 53
	
	// Slaapfunctie aanzetten in MCUCR (Een slaapliedje zingen :P)
	sleep_enable();
  4e:	85 b7       	in	r24, 0x35	; 53
  50:	80 62       	ori	r24, 0x20	; 32
  52:	85 bf       	out	0x35, r24	; 53
	
	// Welterusten!
	sleep_cpu();
  54:	88 95       	sleep
	//////////////////////////////////////////////////////////////////////////
	// CPU gaat hier verder als deze ontwaakt. Goeiemorgen!
	
	// Interrupt uitzetten
	GIMSK &= ~(1 << INT0);
  56:	8b b7       	in	r24, 0x3b	; 59
  58:	8f 7b       	andi	r24, 0xBF	; 191
  5a:	8b bf       	out	0x3b, r24	; 59
	// Slaapfunctie uitzetten
	sleep_disable();
  5c:	85 b7       	in	r24, 0x35	; 53
  5e:	8f 7d       	andi	r24, 0xDF	; 223
  60:	85 bf       	out	0x35, r24	; 53
  62:	08 95       	ret

00000064 <main>:
	// Variabelen declareren
	unsigned int uiStap = 0;
	unsigned long ulTimer = 0;
	
	// Enable LED Outputs
	DDRB |= (1 << PIN_LED_E) | (1 << PIN_LED_W) | (1 << PIN_LED_S);
  64:	87 b3       	in	r24, 0x17	; 23
  66:	8d 60       	ori	r24, 0x0D	; 13
  68:	87 bb       	out	0x17, r24	; 23
	// Timer in CTC mode zetten
	TCCR0A |= (1 << WGM01);
  6a:	8f b5       	in	r24, 0x2f	; 47
  6c:	82 60       	ori	r24, 0x02	; 2
  6e:	8f bd       	out	0x2f, r24	; 47
	// Clock prescaler van CLKio/8 instellen
	TCCR0B |= (1 << CS01);
  70:	83 b7       	in	r24, 0x33	; 51
  72:	82 60       	ori	r24, 0x02	; 2
  74:	83 bf       	out	0x33, r24	; 51
	
	// Interrupt van 1KHz (1000Hz) --> OCR = (CLKio / (2*prescaler*Focr)) - 1 --> OCR = 74
	// CLKio = 1,2 MHz (1200000 Hz), prescaler = 8, Focr = 1000
	// Maar, uitkomst * 2 (want we willen geen waveform genereren) --> OCR = 148
	// 
	OCR0A = 144;
  76:	80 e9       	ldi	r24, 0x90	; 144
  78:	86 bf       	out	0x36, r24	; 54
	
	// Timer compare interrupt aanzetten om de 1KHz interrupt te starten
	TIMSK0 |= (1 << OCIE0A);
  7a:	89 b7       	in	r24, 0x39	; 57
  7c:	84 60       	ori	r24, 0x04	; 4
  7e:	89 bf       	out	0x39, r24	; 57
	
	// Alle (ingestelde) interrupts inschakelen
	sei();
  80:	78 94       	sei
	
	// CPU laten slapen
	doSleep();
  82:	df df       	rcall	.-66     	; 0x42 <doSleep>

int main(void)
{
	// Variabelen declareren
	unsigned int uiStap = 0;
	unsigned long ulTimer = 0;
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	dc 01       	movw	r26, r24
}

int main(void)
{
	// Variabelen declareren
	unsigned int uiStap = 0;
  8a:	e0 e0       	ldi	r30, 0x00	; 0
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	0f 2e       	mov	r0, r31
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	cf 2e       	mov	r12, r31
  94:	f0 2d       	mov	r31, r0
  96:	d1 2c       	mov	r13, r1
  98:	0f 2e       	mov	r0, r31
  9a:	f5 e0       	ldi	r31, 0x05	; 5
  9c:	ef 2e       	mov	r14, r31
  9e:	f0 2d       	mov	r31, r0
  a0:	f1 2c       	mov	r15, r1
  a2:	03 e0       	ldi	r16, 0x03	; 3
  a4:	10 e0       	ldi	r17, 0x00	; 0
  a6:	d1 e0       	ldi	r29, 0x01	; 1
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	0b c0       	rjmp	.+22     	; 0xc2 <__stack+0x23>
  ac:	ed 2f       	mov	r30, r29
  ae:	fc 2f       	mov	r31, r28
  b0:	08 c0       	rjmp	.+16     	; 0xc2 <__stack+0x23>
  b2:	e0 2f       	mov	r30, r16
  b4:	f1 2f       	mov	r31, r17
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <__stack+0x23>
  b8:	ee 2d       	mov	r30, r14
  ba:	ff 2d       	mov	r31, r15
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__stack+0x23>
  be:	ec 2d       	mov	r30, r12
  c0:	fd 2d       	mov	r31, r13
	while(1)
	{
		
		// Stap bijhouden
		
		switch(uiStap)
  c2:	e6 5f       	subi	r30, 0xF6	; 246
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	09 94       	ijmp
		{
			// LED E aan
			case 0: // E
				PORTB |= (1 << PIN_LED_E);
  c8:	c0 9a       	sbi	0x18, 0	; 24
				ulTimer = ulMil + 500;
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ce:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  d2:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
  d6:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
  da:	8c 50       	subi	r24, 0x0C	; 12
  dc:	9e 4f       	sbci	r25, 0xFE	; 254
  de:	af 4f       	sbci	r26, 0xFF	; 255
  e0:	bf 4f       	sbci	r27, 0xFF	; 255
				uiStap++;
				break;
			
			// Wachten op de timer 
			case 1:
				if(ulMil >= ulTimer) uiStap++;
  e2:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <_edata>
  e6:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <_edata+0x1>
  ea:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <_edata+0x2>
  ee:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <_edata+0x3>
  f2:	48 17       	cp	r20, r24
  f4:	59 07       	cpc	r21, r25
  f6:	6a 07       	cpc	r22, r26
  f8:	7b 07       	cpc	r23, r27
  fa:	c0 f2       	brcs	.-80     	; 0xac <__stack+0xd>
				break;
			
			// LED E uit, W aan
			case 2: // W
				PORTB &= ~(1 << PIN_LED_E);
  fc:	c0 98       	cbi	0x18, 0	; 24
				PORTB |= (1 << PIN_LED_W);
  fe:	c2 9a       	sbi	0x18, 2	; 24
				ulTimer = ulMil + 500;
 100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 104:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 108:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
 10c:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
 110:	8c 50       	subi	r24, 0x0C	; 12
 112:	9e 4f       	sbci	r25, 0xFE	; 254
 114:	af 4f       	sbci	r26, 0xFF	; 255
 116:	bf 4f       	sbci	r27, 0xFF	; 255
				uiStap++;
				break;
			
			// Wachten op de timer
			case 3:
				if(ulMil >= ulTimer) uiStap++;
 118:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <_edata>
 11c:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <_edata+0x1>
 120:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <_edata+0x2>
 124:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <_edata+0x3>
 128:	48 17       	cp	r20, r24
 12a:	59 07       	cpc	r21, r25
 12c:	6a 07       	cpc	r22, r26
 12e:	7b 07       	cpc	r23, r27
 130:	08 f4       	brcc	.+2      	; 0x134 <__stack+0x95>
 132:	bf cf       	rjmp	.-130    	; 0xb2 <__stack+0x13>
				break;
			
			// W uit, S aan
			case 4: // S
				PORTB &= ~(1 << PIN_LED_W);
 134:	c2 98       	cbi	0x18, 2	; 24
				PORTB |= (1 << PIN_LED_S);
 136:	c3 9a       	sbi	0x18, 3	; 24
				ulTimer = ulMil + 500;
 138:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 13c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 140:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
 144:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
 148:	8c 50       	subi	r24, 0x0C	; 12
 14a:	9e 4f       	sbci	r25, 0xFE	; 254
 14c:	af 4f       	sbci	r26, 0xFF	; 255
 14e:	bf 4f       	sbci	r27, 0xFF	; 255
				uiStap++;
				break;
			
			// Wachten op de timer
			case 5:
				if(ulMil >= ulTimer) uiStap++;
 150:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <_edata>
 154:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <_edata+0x1>
 158:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <_edata+0x2>
 15c:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <_edata+0x3>
 160:	48 17       	cp	r20, r24
 162:	59 07       	cpc	r21, r25
 164:	6a 07       	cpc	r22, r26
 166:	7b 07       	cpc	r23, r27
 168:	08 f4       	brcc	.+2      	; 0x16c <__stack+0xcd>
 16a:	a6 cf       	rjmp	.-180    	; 0xb8 <__stack+0x19>
				break;
			
			 // LEDs uit en wachten tot de beugel niet meer is bediend
			case 6:
				PORTB = 0;
 16c:	18 ba       	out	0x18, r1	; 24
				// Als de beugel niet meer bediend is
				if((PINB >> PB1) & 0x01) uiStap++;
 16e:	b1 9b       	sbis	0x16, 1	; 22
 170:	a6 cf       	rjmp	.-180    	; 0xbe <__stack+0x1f>
				break;
		
			// MCU laten slapen
			case 7:
				doSleep();
 172:	67 df       	rcall	.-306    	; 0x42 <doSleep>
 174:	a9 cf       	rjmp	.-174    	; 0xc8 <__stack+0x29>

00000176 <__vector_6>:
}

// Teller om een vertragingssignaal te genereren.
// Hiermee kan elk lampje een bepaalde tijdsduur aangezet worden.
ISR(TIM0_COMPA_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
	ulMil++;
 188:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 18c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 190:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
 194:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	a1 1d       	adc	r26, r1
 19c:	b1 1d       	adc	r27, r1
 19e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1a2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 1a6:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
 1aa:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
}
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_1>:

// Getriggerd op een laag niveau op PB1
ISR(INT0_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
	// Als deze getriggerd wordt, dan de microcontroller ontwaken
	// Dit gebeurt vanzelf, dus hier hoeft niets gedaan te worden.
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
